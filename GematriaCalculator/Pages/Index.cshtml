@page
@using GematriaCalculator.Data
@using GematriaCalculator.Models
@model IndexModel
@{
    ViewData["Title"] = "Calculator";

    List<Models.Gematria> gematrias = ApplicationData.Gematrias.ToList();
}
@await Html.PartialAsync("_Calculator.cshtml", gematrias)
@section Scripts{
    <script>
        function getValue(item) {
            let result = 0;
            if (item.length) {
                if ($(`button[name=${item}]`).length) {
                    let bValue = $(`button[name=${item}]`).val();
                    if (bValue) {
                        const parsed = parseInt(bValue);
                        if (isNaN(parsed)) {
                            result = 0;
                        }
                        else {
                            result = parsed;
                        }
                    }
                }
            }
            return result;
        }

        $(function () {
            $(".modal-body button[type=button]").click(function () {
                let qText = $("#q").val();
                let bName = $(this).attr("name");
                $("#q").val(qText + bName);
                $("#q").keyup();
                $("#q").focus();
            });

            $("#q").keyup(function () {
                let sum = 0;
                let qText = $(this).val();
                const stripped = qText.replace(/\s+/g, '')
                if (stripped) {
                    for (var i = 0; i < stripped.length; i++) {
                        let v = getValue(stripped.charAt(i));
                        sum = sum + v;
                    }
                }
                $("label[for=q]").text(sum);
            });

            $("#q").focus();
        });
    </script>
}